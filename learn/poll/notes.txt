send the socket - send()
ssize_t send(int sockfd, const void *buf, size_t len, int flags);
headers
#include <sys/types.h> 
#include <sys/socket.h>

for more info :-> https://manual.cs50.io/2/send
wThe system calls send(), sendto(), and sendmsg() 
are used to transmit a message to another socket.

The send() call may be used only when the socket 
is in a connected state (so that the intended recipient is known). 
The only difference between send() and write(2) is the presence of 
flags. With a zero flags argument, send() is equivalent to write(2).
 Also, the following call
send(sockfd, buf, len, flags);
is equivalent to
sendto(sockfd, buf, len, flags, NULL, 0);
The argument sockfd is the file descriptor of the sending socket.

The flags argument
The flags argument is the bitwise OR of zero or more of the following flags.
(
	look at the manual page for more flags;
)

recv the socket -  recv()

ssize_t recv(int sockfd, void *buf, size_t len, int flags);

for more info :-> https://manual.cs50.io/2/recv

headers
#include <sys/types.h> 
#include <sys/socket.h>

The recv(), recvfrom(), and recvmsg() calls are used to receive messages from a socket. 
They may be used to receive data on both connectionless and connection-oriented sockets. 
This page first describes common features of all three system calls, and then describes the 
differences between the calls.

The only difference between recv() and read(2) is the presence of flags. With a zero flags 
argument, recv() is generally equivalent to read(2) (but see NOTES). Also, the following call
recv(sockfd, buf, len, flags);
is equivalent to
recvfrom(sockfd, buf, len, flags, NULL, NULL);
All three calls return the length of the message on successful completion. If a message is too 
long to fit in the supplied buffer, excess bytes may be discarded depending on the type of socket 
the message is received from.

If no messages are available at the socket, the receive calls wait for a message to arrive, unless 
the socket is nonblocking (see fcntl(2)), in which case the value -1 is returned and the external 
variable errno is set to EAGAIN or EWOULDBLOCK. The receive calls normally return any data available,
 up to the requested amount, rather than waiting for receipt of the full amount requested.
 
An application can use select(2), poll(2), or epoll(7) to determine when more data arrives on a socket.
